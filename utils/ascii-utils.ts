export function convertToAscii(text: string): string {
  // Better ASCII art conversion with proper character mapping
  const asciiMap: { [key: string]: string[] } = {
    A: [" ██████ ", "██    ██", "████████", "██    ██", "██    ██"],
    B: ["███████ ", "██    ██", "███████ ", "██    ██", "███████ "],
    C: [" ███████", "██      ", "██      ", "██      ", " ███████"],
    D: ["██████  ", "██   ██ ", "██   ██ ", "██   ██ ", "██████  "],
    E: ["████████", "██      ", "██████  ", "██      ", "████████"],
    F: ["████████", "██      ", "██████  ", "██      ", "██      "],
    G: [" ███████", "██      ", "██  ████", "██    ██", " ███████"],
    H: ["██    ██", "██    ██", "████████", "██    ██", "██    ██"],
    I: ["████████", "   ██   ", "   ██   ", "   ██   ", "████████"],
    J: ["████████", "     ██ ", "     ██ ", "██   ██ ", " ███████"],
    K: ["██   ██ ", "██  ██  ", "█████   ", "██  ██  ", "██   ██ "],
    L: ["██      ", "██      ", "██      ", "██      ", "████████"],
    M: ["██    ██", "████████", "██ ██ ██", "██    ██", "██    ██"],
    N: ["██    ██", "███   ██", "██ ██ ██", "██   ███", "██    ██"],
    O: [" ███████", "██    ██", "██    ██", "██    ██", " ███████"],
    P: ["███████ ", "██    ██", "███████ ", "██      ", "██      "],
    Q: [" ███████", "██    ██", "██ ██ ██", "██   ███", " ████████"],
    R: ["███████ ", "██    ██", "███████ ", "██   ██ ", "██    ██"],
    S: [" ███████", "      ██", " ███████", "      ██", " ███████"],
    T: ["████████", "   ██   ", "   ██   ", "   ██   ", "   ██   "],
    U: ["██    ██", "██    ██", "██    ██", "██    ██", " ███████"],
    V: ["██    ██", "██    ██", "██    ██", " ██  ██ ", "  ████  "],
    W: ["██    ██", "██    ██", "██ ██ ██", "████████", "██    ██"],
    X: ["██    ██", " ██  ██ ", "  ████  ", " ██  ██ ", "██    ██"],
    Y: ["██    ██", " ██  ██ ", "  ████  ", "   ██   ", "   ██   "],
    Z: ["████████", "     ██ ", "   ██   ", " ██     ", "████████"],
    "0": [" ███████", "██    ██", "██    ██", "██    ██", " ███████"],
    "1": ["   ██   ", "  ███   ", "   ██   ", "   ██   ", "████████"],
    "2": [" ███████", "      ██", " ███████", "██      ", "████████"],
    "3": [" ███████", "      ██", " ███████", "      ██", " ███████"],
    "4": ["██    ██", "██    ██", "████████", "      ██", "      ██"],
    "5": ["████████", "██      ", "███████ ", "      ██", "███████ "],
    "6": [" ███████", "██      ", "███████ ", "██    ██", " ███████"],
    "7": ["████████", "      ██", "     ██ ", "    ██  ", "   ██   "],
    "8": [" ███████", "██    ██", " ███████", "██    ██", " ███████"],
    "9": [" ███████", "██    ██", " ████████", "      ██", " ███████"],
    "!": ["   ██   ", "   ██   ", "   ██   ", "        ", "   ██   "],
    "?": [" ███████", "      ██", "   ████ ", "        ", "   ██   "],
    ".": ["        ", "        ", "        ", "        ", "   ██   "],
    " ": ["        ", "        ", "        ", "        ", "        "],
  }

  if (text.length > 15) {
    // For very long text, use a simpler box representation
    const lines = text.match(/.{1,20}/g) || [text]
    const maxLength = Math.max(...lines.map((line) => line.length))
    const border = "═".repeat(maxLength + 2)

    return [`╔${border}╗`, ...lines.map((line) => `║ ${line.padEnd(maxLength)} ║`), `╚${border}╝`].join("\n")
  }

  const lines = ["", "", "", "", ""]
  const upperText = text.toUpperCase()

  for (let i = 0; i < upperText.length; i++) {
    const char = upperText[i]
    if (asciiMap[char]) {
      for (let j = 0; j < 5; j++) {
        lines[j] += asciiMap[char][j] + " "
      }
    } else {
      // Unknown character - use a placeholder
      for (let j = 0; j < 5; j++) {
        lines[j] += "████████ "
      }
    }
  }

  return lines.join("\n")
}

export function createBorder(text: string, style: "single" | "double" = "single"): string {
  const chars =
    style === "double"
      ? { h: "═", v: "║", tl: "╔", tr: "╗", bl: "╚", br: "╝" }
      : { h: "─", v: "│", tl: "┌", tr: "┐", bl: "└", br: "┘" }

  const width = text.length + 2
  const top = chars.tl + chars.h.repeat(width) + chars.tr
  const middle = chars.v + " " + text + " " + chars.v
  const bottom = chars.bl + chars.h.repeat(width) + chars.br

  return [top, middle, bottom].join("\n")
}
